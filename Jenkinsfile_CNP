#!groovy
@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl

def type = "java"
def product = "wa"
def component = "workflow-api"
def dmnBranch = "master"
def bpmnBranch = "master"

def secrets = [
  'wa-${env}' : [
    secret('workflow-api-POSTGRES-PASS', 'POSTGRES_PASSWORD'),
    secret('workflow-api-POSTGRES-USER', 'POSTGRES_USERNAME'),
    secret('ld-secret', 'LAUNCH_DARKLY_SDK_KEY'),
  ],
  's2s-${env}': [
    secret('microservicekey-wa-workflow-api', 'S2S_SECRET_WORKFLOW_API'),
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

def branchesToSync = ['demo', 'ithc', 'perftest']

withPipeline(type, product, component) {
  disableLegacyDeployment()

  env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"
  env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
  env.CAMUNDA_URL = "http://camunda-api-aat.service.core-compute-aat.internal/engine-rest"
  env.POSTGRES_HOST = "wa-workflow-api-postgres-db-aat.postgres.database.azure.com"
  env.PACT_BROKER_FULL_URL = "https://pact-broker.platform.hmcts.net"
  env.PACT_BROKER_URL = "pact-broker.platform.hmcts.net"
  env.PACT_BROKER_PORT = "443"
  env.PACT_BROKER_SCHEME = "https"
  env.WA_TASK_MANAGEMENT_API_URL = "http://wa-task-management-api-{{ .Values.global.environment }}.service.core-compute-{{ .Values.global.environment }}.internal"

  loadVaultSecrets(secrets)

  afterSuccess('test') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/integration/**/*'
  }

  afterSuccess('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/functional/**/*'
  }

  afterSuccess('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/functional/**/*'
  }

  onMaster() {
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER, AppPipelineDsl.PactRoles.PROVIDER])
  }

  onPR() {
    enableCleanupOfHelmReleaseOnSuccess()
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER, AppPipelineDsl.PactRoles.PROVIDER])
  }

  afterSuccess('akschartsinstall') {
    onPR {
      env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
      env.CAMUNDA_BASE_URL = "http://camunda-wa-workflow-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
      env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
      sh """
      ./bin/pull-latest-dmn-files.sh ${dmnBranch}
      ./bin/pull-latest-camunda-wa-files.sh ${bpmnBranch}
    """
    }
  }

  // Sync environment specific branches with master branch
  syncBranchesWithMaster(branchesToSync)
}
