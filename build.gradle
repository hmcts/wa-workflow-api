plugins {
  id 'idea'
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.5.3'
  id 'org.owasp.dependencycheck' version '12.1.3'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'org.sonarqube' version '6.2.0.5505'
  id 'info.solidsoft.pitest' version '1.15.0'
  id 'org.flywaydb.flyway' version '10.22.0'
  id 'io.freefair.lombok' version '8.11'
  // If Pact version is changed, make sure serenity report works.
  id 'net.serenity-bdd.serenity-gradle-plugin' version '4.2.33'
  id 'au.com.dius.pact' version '4.6.17'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

sourceSets {
  testUtils {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/testUtils/java')
    }
    resources.srcDir file('src/testUtils/resources')
  }

  functionalTest {
    java {
      compileClasspath += testUtils.output
      runtimeClasspath += testUtils.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += testUtils.output
      runtimeClasspath += testUtils.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }
}

idea {
  module {
    sourceDirs += project.sourceSets.testUtils.java.srcDirs
    resourceDirs += project.sourceSets.testUtils.resources.srcDirs
    testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
    testResourceDirs += project.sourceSets.integrationTest.resources.srcDirs
    testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
    testResourceDirs += project.sourceSets.functionalTest.resources.srcDirs
    testSourceDirs += project.sourceSets.smokeTest.java.srcDirs
    testResourceDirs += project.sourceSets.smokeTest.resources.srcDirs
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
    showStandardStreams = true
  }
}

tasks.withType(Copy) {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}
project.ext {
  pacticipant = 'wa_workflow_api'
  pacticipantVersion = getCheckedOutGitCommitHash()
  pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
  pactBranchName = System.getenv("PACT_BRANCH_NAME") ?: 'Dev'
}

task tests {
  description = "Runs junit , integration and functional tests"
  dependsOn test, integration, functional
}

task fortifyScan(type: JavaExec) {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.26.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "7.8.0"
  sourceSets = [sourceSets.main]
  reportsDir = layout.buildDirectory.dir("reports/pmd").get().asFile
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml"))
  }
}

pitest {
  junit5PluginVersion = '1.2.1'
  pitestVersion = '1.19.5'
  targetClasses = ['uk.gov.hmcts.reform.waworkflowapi.*']
  excludedClasses = [
    'uk.gov.hmcts.reform.waworkflowapi.config.*',
    'uk.gov.hmcts.reform.waworkflowapi.Application'
  ]
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 80
}
project.tasks['pitest'].group = "Verification"

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

// Ensures that functional tests index page is generated
// Functional tests should run two tasks "functional" and "aggregate"
gradle.startParameter.continueOnFailure = true
functional.finalizedBy aggregate

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: wa-workflow-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:wa-workflow-api"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation.get().asFile.absolutePath}"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/waworkflowapi/config/**," +
      "src/main/java/uk/gov/hmcts/reform/waworkflowapi/exceptions/**," +
      "src/testUtils/java/uk/gov/hmcts/reform/waworkflowapi/**"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'

  //CVE Scanning only relevant to production code that is published, not test or other implementations
  scanConfigurations += 'releaseCompileClasspath'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '33.3.1-jre') {
      entry 'guava'
    }

    dependencySet(group: 'ch.qos.logback', version: '1.5.18') {
      entry 'logback-classic'
      entry 'logback-core'
    }

    dependency group: 'commons-io', name: 'commons-io', version: '2.18.0'

    dependencySet( group: 'org.springframework.security', version: '6.5.1'){
      entry 'spring-boot-starter-security'
      entry 'spring-security-core'
      entry 'spring-security-acl'
      entry 'spring-security-aspects'
      entry 'spring-security-cas'
      entry 'spring-security-config'
      entry 'spring-security-crypto'
      entry 'spring-security-data'
      entry 'spring-security-ldap'
      entry 'spring-security-messaging'
      entry 'spring-security-oauth2-client'
      entry 'spring-security-oauth2-core'
      entry 'spring-security-oauth2-jose'
      entry 'spring-security-oauth2-resource-server'
      entry 'spring-security-openid'
      entry 'spring-security-remoting'
      entry 'spring-security-rsocket'
      entry 'spring-security-saml2-service-provider'
      entry 'spring-security-taglibs'
      entry 'spring-security-test'
      entry 'spring-security-web'
    }
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
  }
}

def versions = [
  junit         : '5.13.3',
  junitPlatform : '1.13.3',
  reformLogging : '6.1.9',
  springDoc     : '1.7.0',
  serenity      : '4.2.34',
  gradlePitest  : '1.15.0',
  pitest        : '1.19.5',
  sonarPitest   : '0.5',
  camunda       : '7.14.0',
  logbook       : '3.10.0',
  pactVersion   : '4.6.17',
  testcontainers: '1.21.3',
  log4j         : '2.25.0',
  tomcat        : '10.1.43'
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

ext['snakeyaml.version'] = '2.0'

dependencies {

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-rest'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.9'

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.3.0'

  implementation group: 'org.springframework.security', name: 'spring-security-rsa', version: '1.1.5'

  implementation group: 'org.zalando', name: 'logbook-spring-boot-starter', version: versions.logbook
  implementation 'org.zalando:problem-spring-web-starter:0.27.0'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.2'
  implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '13.5'

  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'

  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
  implementation group: 'org.flywaydb', name: 'flyway-core', version: '10.22.0'
  implementation group: 'org.flywaydb', name: 'flyway-database-postgresql', version: '10.22.0'
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.7'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.log4j
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.log4j

  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: versions.tomcat
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: versions.tomcat

  implementation group: 'org.hibernate', name: 'hibernate-core', version: '6.6.21.Final'

  implementation group: 'org.camunda.bpm', name: 'camunda-external-task-client', version: '7.22.0'

  implementation group: 'javax.xml', name: 'jaxb-api', version: '2.1'

  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '7.10.1'

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  testImplementation group: 'com.obsidiandynamics.pojotester', name: 'core', version: '0.9.0'
  testImplementation group: 'com.google.guava', name: 'guava-testlib', version: '33.3.1-jre'
  testImplementation group: 'com.jparams', name: 'to-string-verifier', version: '1.4.8'

  integrationTestImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: versions.junit

  testImplementation group: 'com.h2database', name: 'h2', version: '2.3.232'
  testImplementation group: 'org.testcontainers', name: 'postgresql', version: versions.testcontainers
  testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: versions.testcontainers

  testImplementation group: 'org.pitest', name: 'pitest', version: versions.pitest
  testImplementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
  testImplementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest

  testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity

  testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: versions.junit

  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.9', classifier: 'all'

  //Pact contract testing
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pactVersion
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: '4.1.43'

  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: versions.pactVersion
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: versions.pactVersion
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: versions.pactVersion

  contractTestImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit)
  contractTestRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit)
  contractTestImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit)

  testUtilsImplementation sourceSets.main.runtimeClasspath
  testUtilsImplementation sourceSets.test.runtimeClasspath

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath
}


task runAndPublishConsumerPactTests(type: Test) {
  logger.lifecycle("Runs pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

runAndPublishConsumerPactTests.finalizedBy pactPublish

pact {
  broker {
    pactBrokerUrl = project.ext.pactBrokerUrl
  }
  publish {
    pactDirectory = 'pacts'
    pactBrokerUrl = project.ext.pactBrokerUrl
    tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    version = project.pacticipantVersion
  }
}

pactPublish {
    pactPublish = project.pact.publish
}

task contract(type: Test) {
  description = "Runs the consumer Pact tests"
  group = 'Verification'
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

task runProviderPactVerification(type: Test) {
  logger.lifecycle("Runs provider pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath

  if (project.hasProperty('pact.verifier.publishResults')) {
    systemProperty 'pact.verifier.publishResults', project.property('pact.verifier.publishResults')
  }
  systemProperty 'pact.provider.version', project.pacticipantVersion
}

runProviderPactVerification.dependsOn contract

runProviderPactVerification.finalizedBy pactVerify

mainClassName = 'uk.gov.hmcts.reform.waworkflowapi.Application'

bootJar {
  getArchiveFileName().set(provider {
    'wa-workflow-api.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
